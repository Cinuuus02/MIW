using System;

class Program
{
    static double[][] x = {
        new double[] {0, 0},
        new double[] {0, 1},
        new double[] {1, 0},
        new double[] {1, 1}
    };
    static double[] y = {0, 1, 1, 0};
    
    static double[] wagi1 = new double[3];
    static double[] wagi2 = new double[3];
    static double[] wagi3 = new double[3];
    static Random rand = new Random();

    static double Sigma(double x)
    {
        return 1.0 / (1.0 + Math.Exp(-x));
    }

    static double Skalar(double[] x, double[] wagi)
    {
        double sum = 0;
        for (int i = 0; i < x.Length; i++)
            sum += x[i] * wagi[i];
        sum += wagi[wagi.Length - 1];
        return sum;
    }

    static void Main()
    {
        int epoki = 5000000;
        double u = 0.02;
        double b = 1;

        for (int i = 0; i < wagi1.Length; i++)
            wagi1[i] = rand.NextDouble() * 10 - 5;
        for (int i = 0; i < wagi2.Length; i++)
            wagi2[i] = rand.NextDouble() * 10 - 5;
        for (int i = 0; i < wagi3.Length; i++)
            wagi3[i] = rand.NextDouble() * 10 - 5;

        for (int e = 0; e < epoki; e++)
        {
            for (int i = 0; i < x.Length; i++)
            { 
                double[] we = x[i];
                double oczekiwana = y[i];

                double n1 = Sigma(Skalar(we, wagi1));
                double n2 = Sigma(Skalar(we, wagi2));
                double wy = Sigma(Skalar(new double[] { n1, n2 }, wagi3));

                double blad = oczekiwana - wy;
                double delta_wy = u * blad;

                if (e == 0 || e == epoki-1){
                    Console.WriteLine($"Epoka {e}, blad dla: " + string.Join(", ", x[i])+$" blad:{blad}");
                }
                    
                double delta_s = delta_wy * b * wy * (1 - wy);

                wagi3[0] += delta_s * n1;
                wagi3[1] += delta_s * n2;
                wagi3[2] += delta_s * 1;

                double blad_n1 = delta_s * wagi3[0];
                double blad_n2 = delta_s * wagi3[1];

                double delta_n1 = blad_n1 * n1 * (1 - n1);
                double delta_n2 = blad_n2 * n2 * (1 - n2);

                wagi1[0] += delta_n1 * we[0];
                wagi1[1] += delta_n1 * we[1];
                wagi1[2] += delta_n1 * 1;

                wagi2[0] += delta_n2 * we[0];
                wagi2[1] += delta_n2 * we[1];
                wagi2[2] += delta_n2 * 1;
            }
        }
    }
}
